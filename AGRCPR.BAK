#include <conio.h>
#include <dos.h>
#include <time.h>
#include <graphics.h>
#include <alloc.h>
#include <stdlib.h>
#include "agreg.h"


int goutpr(void)
{
int c,del;
 del=1000/180.0*timout;
 for(c=0;c<500;c++)
	{if(kbhit()) return getch(); delay(2);}
for(c=0;(c<del)&&(!kbhit());c++)
 {
	adcget();
	delay(100);
	getch1(0x11);
 }
 if(c==del) return 0xfefe; else getch();
}

void adcpr(int kn,int rp,int no)  /*  kn-kanal namber,rp-ppp:prp, */
{
int a[4]={0,0,0,0};
unsigned long tm=0;
unsigned long timer;
int k,c;
c=100;
if(kn<4)
 {

 if(chn[kn]==0) {if(rp)avptr->prmk[kn].prp=0;else avptr->prmk[kn].ppp=0; return;}
 for(k=0;k<no;k++)
	{
	 do
	 timer=time(NULL);
	 while(tm==timer);
	adcget();
  a[0]+=avptr->prmk[kn].p;
				avptr->prmk[kn].t=no-1-k;
		while(kbhit()) getch();
	getch1(0x11);
	timer=time(NULL);
	tm=timer;
	}

 if(rp)avptr->prmk[kn].prp=(int)(a[0]/no);
 else avptr->prmk[kn].ppp=(int)(a[0]/no);
 prmscr(kn);
 return;
 }

 for(k=0;k<no;k++)
	{
	 do
		timer=time(NULL);
	 while(tm==timer);
	adcget();
	for(kn=0;kn<4;kn++)
   {
		if(chn[kn]!=0)
     {
		 a[kn]+=avptr->prmk[kn].p;
		 avptr->prmk[kn].t=no-1-k;
			while(kbhit()) getch();
			getch1(0x11);
		 }
	 }
	timer=time(NULL);
	tm=timer;

	}
 for(c=0;c<4;c++)
   {
    if(chn[c]!=0)
     {
		if(rp) avptr->prmk[c].prp=(int)(a[c]/no);
		else  avptr->prmk[c].ppp=(int)(a[c]/no);
     prmscr(c);
     }
   }
} /*adcpr*/



int pppset(void)
{
 int n,c,y;
 char *buff;
 char bufer[15];
 if(!mixf) {MIX_ON();mixf=1;}
 setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
 clearviewport();
 setviewport(10+x0,dly*23,600+x0,dly*24-1,1);
 clearviewport();
 setviewport(0,0,639+x0,dly*25-3,1);
 outtextxy(10+x0,dly*23,"Enter - измерить ; - вверх ; - вниз ;Esc - выход");
 outtextxy(336+x0,dly*5,"Залейте бедную плазму");
 outtextxy(336+x0,dly*6,"в измерительные кюветы");
 outtextxy(336+x0,dly*7,"  и нажмите ENTER");
 buff=malloc(imagesize(16+x0,13*dly,144+x0,21*dly));
 getimage(16+x0,13*dly,144+x0,21*dly,buff);
 line(16+x0,dly*13,16+16*8+x0,dly*13);
 line(16+16*8+x0,dly*13,16+16*8+x0,dly*19+1);
 line(16+x0,dly*19+1,16+16*8+x0,dly*19+1);
 line(16+x0,dly*13,16+x0,dly*19+1);
 outtextxy(16+x0,dly*14,"  ИЗМЕРИТЬ ВСЕ");
 for(n=0;n<4;n++)  /*374*/
 {
  setviewport(32+x0,(15+n)*dly,128+x0,(16+n)*dly,1);
        sprintf(bufer,"%d - %s",n+1,(avptr->prmk[n].ppp==0)?"НЕ ИЗМ.":"ИЗМЕРЕН");
  outtext(bufer);
 }
 setviewport(0,0,639+x0,dly*25-3,1);
 y=0;
 inblok(3,14+y,14);
 for(c=0;c!=27;c=goutpr())
 {
 switch(c)
  {
   case 72 :inblok(3,14+y,14);if(y>0) y--;else y=4;inblok(3,14+y,14);break;
   case 80 :inblok(3,14+y,14);if(y<4) y++;else y=0;inblok(3,14+y,14);break;
   case 13 :
          setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
          clearviewport();
          setviewport(0,0,639+x0,dly*25-3,1);
					outtextxy(336+x0,dly*5,"Измерение");
					if(y==0) adcpr(4,0,TIMEPPP);
					 else if(y!=0) adcpr(y-1,0,TIMEPPP);
          setviewport(0,0,639+x0,dly*25-3,1);
          inblok(3,14+y,14);
          for(n=0;n<4;n++)
           {
           setviewport(24+x0,(15+n)*dly,128+x0,(16+n)*dly,1);
           clearviewport();
           setviewport(30+x0,(15+n)*dly,118+x0,(16+n)*dly,1);
					 sprintf(bufer,"%d - %s",n+1,(avptr->prmk[n].ppp==0)?"НЕ ИЗМ.":"ИЗМЕРЕН");
           outtext(bufer);
           }
           setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
           clearviewport();
           setviewport(0,0,639+x0,dly*25-3,1);
           inblok(3,14+y,14);
           setviewport(0,0,639+x0,dly*25-3,1);
           putimage(16+x0,13*dly,buff,0);
           free(buff);
           setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
           clearviewport();
           setviewport(0,0,639+x0,dly*25-6,1);
					 return 1;
		 case 0:break;
		 case 0xfefe:
           setviewport(0,0,639+x0,dly*25-3,1);
					 putimage(16+x0,13*dly,buff,0);
					 free(buff);
					 setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
					 clearviewport();
					 setviewport(0,0,639+x0,dly*25-6,1);
					 return 0;
  }
 }
setviewport(0,0,639+x0,dly*25-3,1);
putimage(16+x0,13*dly,buff,0);
free(buff);
setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
clearviewport();
setviewport(0,0,639+x0,dly*25-6,1);
return 0;
} /*pppset*/



int prpset(void)
{
 int n,c,y,x=120;
 char *buff;
 char bufer[15];
 if(!mixf) {MIX_ON();mixf=1;}
 setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
 clearviewport();
 setviewport(10+x0,dly*23,600+x0,dly*24-1,1);
 clearviewport();
 setviewport(0,0,639+x0,dly*25-3,1);
 outtextxy(10+x0,dly*23,"Enter - измерить ; - вверх ; - вниз ;Esc - выход");
 outtextxy(336+x0,dly*5,"Залейте богатую плазму");
 outtextxy(336+x0,dly*6,"в измерительные кюветы");
 outtextxy(336+x0,dly*7,"  и нажмите ENTER");
 buff=malloc(imagesize(16+x+x0,13*dly,144+x+x0,21*dly));
 getimage(16+x+x0,13*dly,144+x+x0,21*dly,buff);
 line(16+x+x0,dly*13,16+x+16*8+x0,dly*13);
 line(16+x+16*8+x0,dly*13,16+x+16*8+x0,dly*19+1);
 line(16+x+x0,dly*19+1,16+x+16*8+x0,dly*19+1);
 line(16+x+x0,dly*13,16+x+x0,dly*19+1);
 outtextxy(16+x+x0,dly*14,"  ИЗМЕРИТЬ ВСЕ");
 for(n=0;n<4;n++)  /*374*/
 {
  setviewport(32+x+x0,(15+n)*dly,128+x+x0,(16+n)*dly,1);
        sprintf(bufer,"%d - %s",n+1,(avptr->prmk[n].prp==0)?"НЕ ИЗМ.":"ИЗМЕРЕН");
  outtext(bufer);
 }
 setviewport(0,0,639+x0,dly*25-3,1);
 y=0;
 inblok(18,14+y,14);
 for(c=0;c!=27;c=goutpr())
 {
 switch(c)
  {
   case 72 :inblok(18,14+y,14);if(y>0) y--;else y=4;inblok(18,14+y,14);break;
   case 80 :inblok(18,14+y,14);if(y<4) y++;else y=0;inblok(18,14+y,14);break;
   case 13 :
          setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
          clearviewport();
          setviewport(0,0,639+x0,dly*25-3,1);
          outtextxy(336+x0,dly*5,"ИЗМЕРЕНИЕ ПОШЛО !");
					if(y==0) adcpr(4,1,TIMEPRP);
					else if(y!=0) adcpr(y-1,1,TIMEPRP);
          setviewport(0,0,639+x0,dly*25-3,1);
          inblok(18,14+y,14);
          for(n=0;n<4;n++)
           {
           setviewport(24+x+x0,(15+n)*dly,128+x+x0,(16+n)*dly,1);
           clearviewport();
           setviewport(30+x+x0,(15+n)*dly,118+x+x0,(16+n)*dly,1);
                                         sprintf(bufer,"%d - %s",n+1,(avptr->prmk[n].prp==0)?"НЕ ИЗМ.":"ИЗМЕРЕН");
           outtext(bufer);
           }
           setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
           clearviewport();
           setviewport(0,0,639+x0,dly*25-3,1);
           inblok(18,14+y,14);
           setviewport(0,0,639+x0,dly*25-3,1);
           putimage(16+x+x0,13*dly,buff,0);
           free(buff);
           setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
           clearviewport();
           setviewport(0,0,639+x0,dly*25-3,1);
					 return 1;
		case 0:break;
		case 0xfefe:
								setviewport(0,0,639+x0,dly*25-3,1);
								putimage(16+x+x0,13*dly,buff,0);
								free(buff);
								setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
								clearviewport();
								setviewport(0,0,639+x0,dly*25-3,1);
								return 0;
  }
 }
setviewport(0,0,639+x0,dly*25-3,1);
putimage(16+x+x0,13*dly,buff,0);
free(buff);
setviewport(336+x0,dly*5,528+x0,dly*8+6,1);
clearviewport();
setviewport(0,0,639+x0,dly*25-3,1);
return 0;
} /*prpset*/

